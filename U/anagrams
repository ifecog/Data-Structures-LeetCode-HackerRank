from collections import Counter

def group_anagrams(strs):
    anagrams = {}
    
    for word in strs:
        sorted_word = ''.join(sorted(word))
        
        if sorted_word in anagrams:
            anagrams[sorted_word].append(word)
        else:
            anagrams[sorted_word] = [word]
            
    return list(anagrams.values())

# Example usage:
strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
result = group_anagrams(strs)
print(result)


def remove_anagrams(words):
    non_anagrams = []
    
    for i, word in enumerate(words):
        if i == 0 or sorted[word] != sorted(words[i - 1]):
            non_anagrams.append(word)
    
    return non_anagrams


# def check_permutations(s1, s2):
#     len_s1, len_s2 = len(s1), len(s2)
    
#     if len_s2 < len_s1:
#         return False
    
#     s1_counter, s2_counter = Counter(s1), Counter(s2[:len_s1])
    
#     if s1_counter == s2_counter:
#         return True
    
#     for i in range(len_s1, len_s2):
#         s2_counter[s2[i]] += 1
        
#         if s2_counter[s[i - len_s1]] == 1:
#             del s2_counter[s[i - len_s1]]
#         else:
#             s2_counter[s[i - len_s1]] -= 1
            
#         if s1_counter == s2_counter:
#             return True
    
#     return False 


# def find_anagrams(s, p):
#     len_s, len_p = len(s), len(p)
    
#     result = []
    
#     if len_s < len_p:
#         return result
    
#     p_counter, win_counter = Counter(p), Counter(s[:len_p])
    
#     if p_counter == win_counter:
#         result.append(0)
        
#     for i in range(len_p, len_s):
#         win_counter[s[i]] += 1
        
#         if win_counter[s[i - len_p]] == 1:
#             del win_counter[s[i - len_p]]
#         else:
#             win_counter[s[i - len_p]] -= 1
            
#         if win_counter == p_counter:
#             result.append(i - len_p + 1)
    
#     return result

# # Example usage
# s = "cbaebabacdcab"
# p = "abc"
# result = find_anagrams(s, p)
# print(result) 